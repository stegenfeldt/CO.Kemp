<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>CO.Kemp</ID>
      <Version>1.0.0.181</Version>
    </Identity>
    <Name>CO.Kemp</Name>
    <References>
      <Reference Alias="MSDL">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.2.11719.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Perf">
        <ID>System.Performance.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="CO.Kemp.LoadMaster" Base="System!System.ApplicationComponent" Accessibility="Public" Abstract="false" Hosted="false" Singleton="false">
          <Property ID="hostname" Key="true" Type="string" />
          <Property ID="managementurl" Key="true" Type="string" />
          <Property ID="version" Key="false" Type="string" />
          <Property ID="ha1hostname" Key="false" Type="string" />
          <Property ID="ha2hostname" Key="false" Type="string" />
          <Property ID="wuiport" Key="false" Type="int" />
          <Property ID="sshport" Key="false" Type="int" />
          <Property ID="snmplocation" Key="false" Type="string" />
          <Property ID="serialnumber" Key="false" Type="string" />
          <Property ID="ntphost" Key="false" Type="string" />
          <Property ID="dfltgw" Key="false" Type="string" />
          <Property ID="timezone" Key="false" Type="string" />
          <Property ID="SyslogPort" Key="false" Type="int" />
          <Property ID="radiusserver" Key="false" Type="string" />
          <Property ID="nameserver" Key="false" Type="string" />
        </ClassType>
        <ClassType ID="CO.Kemp.LoadMasterDA" Base="System!System.Service" Accessibility="Public" Abstract="false" Hosted="false" Singleton="true"></ClassType>
        <ClassType ID="CO.Kemp.RealServer" Base="System!System.ApplicationComponent" Accessibility="Public" Abstract="false" Hosted="false" Singleton="false">
          <Property ID="RsIndex" Key="true" Type="string" />
          <Property ID="VSIndex" Key="false" Type="string" />
          <Property ID="Addr" Key="false" Type="string" />
          <Property ID="Port" Key="true" Type="int" />
          <Property ID="Forward" Key="false" Type="string" />
          <Property ID="Weight" Key="false" Type="string" />
          <Property ID="Limit" Key="false" Type="int" />
          <Property ID="Critical" Key="false" Type="string" />
          <Property ID="Follow" Key="false" Type="int" />
          <Property ID="DnsName" Key="false" Type="string" />
        </ClassType>
        <ClassType ID="CO.Kemp.ResourcePool" Base="SC!Microsoft.SystemCenter.ManagementServicePool" Accessibility="Public" Abstract="false" Hosted="false" Singleton="true" />
        <ClassType ID="CO.Kemp.SubVirtualService" Base="System!System.ApplicationComponent" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="VSIndex" Key="true" Type="string" />
          <Property ID="VSAddress" Key="false" Type="string" />
          <Property ID="MasterVSID" Key="false" Type="int" />
          <Property ID="Port" Key="false" Type="string" />
          <Property ID="NickName" Key="false" Type="string" />
          <Property ID="Protocol" Key="false" Type="string" />
          <Property ID="QoS" Key="false" Type="int" />
          <Property ID="Layer" Key="false" Type="int" />
          <Property ID="VStype" Key="false" Type="string" />
          <Property ID="NumberOfRSs" Key="false" Type="int" />
          <Property ID="CheckType" Key="false" Type="string" />
          <Property ID="CheckUrl" Key="false" Type="string" />
          <Property ID="ForceL7" Key="false" Type="string" />
          <Property ID="ForceL4" Key="false" Type="string" />
          <Property ID="AlertThreshold" Key="false" Type="int" />
        </ClassType>
        <ClassType ID="CO.Kemp.VirtualService" Base="System!System.ApplicationComponent" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="VSIndex" Key="true" Type="string" />
          <Property ID="VSAddress" Key="false" Type="string" />
          <Property ID="MasterVSID" Key="false" Type="int" />
          <Property ID="Port" Key="false" Type="string" />
          <Property ID="NickName" Key="false" Type="string" />
          <Property ID="Protocol" Key="false" Type="string" />
          <Property ID="QoS" Key="false" Type="int" />
          <Property ID="Layer" Key="false" Type="int" />
          <Property ID="VStype" Key="false" Type="string" />
          <Property ID="NumberOfRSs" Key="false" Type="int" />
          <Property ID="CheckType" Key="false" Type="string" />
          <Property ID="CheckUrl" Key="false" Type="string" />
          <Property ID="ForceL7" Key="false" Type="string" />
          <Property ID="ForceL4" Key="false" Type="string" />
          <Property ID="AlertThreshold" Key="false" Type="int" />
        </ClassType>
      </ClassTypes>
      <RelationshipTypes>
        <RelationshipType ID="CO.Kemp.LoadMasterDAContainsLoadMaster" Base="System!System.Containment" Abstract="false" Accessibility="Internal">
          <Source ID="Source" Type="CO.Kemp.LoadMasterDA" />
          <Target ID="Target" Type="CO.Kemp.LoadMaster" />
        </RelationshipType>
        <RelationshipType ID="CO.Kemp.LoadMasterHostsVirtualService" Base="System!System.Hosting" Abstract="false" Accessibility="Internal">
          <Source ID="Source" Type="CO.Kemp.LoadMaster" />
          <Target ID="Target" Type="CO.Kemp.VirtualService" />
        </RelationshipType>
        <RelationshipType ID="CO.Kemp.SubVirtualServiceContainsRealServer" Base="System!System.Containment" Abstract="false" Accessibility="Internal">
          <Source ID="Source" Type="CO.Kemp.SubVirtualService" />
          <Target ID="Target" Type="CO.Kemp.RealServer" />
        </RelationshipType>
        <RelationshipType ID="CO.Kemp.VirtualServiceContainsRealServer" Base="System!System.Containment" Abstract="false" Accessibility="Internal">
          <Source ID="Source" Type="CO.Kemp.VirtualService" />
          <Target ID="Target" Type="CO.Kemp.RealServer" />
        </RelationshipType>
        <RelationshipType ID="CO.Kemp.VirtualServiceHostsSubVirtualService" Base="System!System.Hosting" Abstract="false" Accessibility="Internal">
          <Source ID="Source" Type="CO.Kemp.VirtualService" />
          <Target ID="Target" Type="CO.Kemp.SubVirtualService" />
        </RelationshipType>
      </RelationshipTypes>
    </EntityTypes>
    <SecureReferences>
      <SecureReference ID="CO.Kemp.KempRunasProfile" Accessibility="Public" />
    </SecureReferences>
    <ModuleTypes>
      <DataSourceModuleType ID="CO.Kemp.InfraDiscovery.ScriptDataSource" Accessibility="Internal">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="LoadMasterBaseUrls" type="NonNullString" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="LoadMasterBaseUrls" ParameterType="string" Selector="$Config/LoadMasterBaseUrls$" />
          <OverrideableParameter ID="Debug" ParameterType="string" Selector="$Config/Debug$" Comment="'true' or 'false'" />
          <OverrideableParameter ID="IntervalSeconds" ParameterType="int" Selector="$Config/IntervalSeconds$" />
          <OverrideableParameter ID="TimeoutSeconds" ParameterType="int" Selector="$Config/TimeoutSeconds$" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Discovery.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="ScriptProbe" TypeID="CO.Kemp.InfraDiscovery.ScriptProbeAction">
                <LoadMasterBaseUrls>$Config/LoadMasterBaseUrls$</LoadMasterBaseUrls>
                <Debug>$Config/Debug$</Debug>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="ScriptProbe">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="CO.Kemp.PerformanceDataMapper.DataSource" Accessibility="Internal">
        <Configuration>
          <xsd:element name="Identifier" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Type" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ObjectName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CounterName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="InstanceName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Value" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="PropertyBag" TypeID="CO.Kemp.StatusMonitoring.TimedDataSource">
                <Identifier>$Config/Identifier$</Identifier>
                <Type>$Config/Type$</Type>
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime />
                <TimeoutSeconds>120</TimeoutSeconds>
              </DataSource>
              <ConditionDetection ID="DataMapper" TypeID="Perf!System.Performance.DataGenericMapper">
                <ObjectName>$Config/ObjectName$</ObjectName>
                <CounterName>$Config/CounterName$</CounterName>
                <InstanceName>$Config/InstanceName$</InstanceName>
                <Value>$Config/Value$</Value>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="DataMapper">
                <Node ID="PropertyBag" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="CO.Kemp.StatusMonitoring.TimedDataSource" Accessibility="Internal">
        <Configuration>
          <xsd:element name="Identifier" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Type" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="ScriptProbe" TypeID="CO.Kemp.StatusMonitoring.ScriptProbe">
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
              <ConditionDetection ID="Filter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Property[@Name='identifier']</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">$Config/Identifier$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Property[@Name='objecttype']</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">$Config/Type$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Filter">
                <Node ID="ScriptProbe">
                  <Node ID="Scheduler" />
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <ProbeActionModuleType Accessibility="Internal" ID="CO.Kemp.InfraDiscovery.ScriptProbeAction">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="LoadMasterBaseUrls" type="NonNullString" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Debug" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe">
                <ScriptName>Get-KempInfra.ps1</ScriptName>
                <ScriptBody><![CDATA[param(
    [string] $LoadMasterBaseUrls
	, [string] $Debug
)

$existingModules = @((Get-Module).Name) # Save existing modules
$existingVars = @((Get-Variable -Scope Global).Name) # Save existing variables, put first in any script
######################################

$Error.Clear() # Fresh start!
$scriptName = "Get-KempInfra.ps1"
$eventId = 18002
$isDebugging = $false

$knownDebugHosts = @(
    "Visual Studio Code Host"
    "Windows PowerShell ISE Host"
)
if ($host.Name -in $knownDebugHosts) {
    # script is running in a known debug environment, set debug values
    $tempDir = "$env:TEMP\CO.Kemp"
    $LoadMasterBaseUrls = "https://avmk01.westeurope.cloudapp.azure.com:8443/" #my free tier azure appliance, perfect for development, may be offline
    $sourceId = '{6b4f36a3-461e-4340-90c9-5634411d216a}' #dummy value for debugging
    $targetId = '{46c128a4-39c6-4b51-980f-3622293689f3}' #dummy value for debugging
    if (!(Test-Path -Path $tempDir)) {New-Item -Path $tempDir -ItemType Directory}
    $isDebugging = $true
}
else {
    $sourceId = '$MPElement$'
    $targetId = '$Target/Id$'
}


class Kemp {
    # Kemp Base URL (LoadMaster admin adress?)
    [string] $AdminAdress
    [System.Net.NetworkCredential] $Credential

    [hashtable] GetClusters() {
        $clResult = $this.QueryKempApi("access/listclusters", @{}).Response.Success.Data

        #$clResult.InnerXml | Out-File -FilePath ".\cl.xml"
        $cl = @{}
        foreach ($clXml in $clResult) {

        }

        return $cl
    }

    [hashtable] GetAll() {
        $allResult = $this.QueryKempApi("access/getall", @{}).Response.Success.Data

        #$allResult.InnerXml | Out-File -FilePath ".\all.xml"
        $all = @{}
        foreach ($allXml in $allResult.ChildNodes) {
            #TODO Add $cl.Add() for cluster hashtag
            if ($allXml.Name -in $all.Keys) {
                $all[$allXml.Name] = $all[$allXml.Name] + "," + $allXml.InnerText
            }
            else {
                $all.Add($allXml.Name, $allXml.InnerText)
            }
        }
        if ($all.Count -gt 1) {
            #got results, add proper management property
            $all.Add("managementhost", $(([System.Uri]$this.AdminAdress).Host))
        }
        return $all
    }

    [hashtable] ListFQDNs() {
        $allResult = $this.QueryKempApi("access/listfqdns", @{}).Response.Success.Data

        #$allResult.InnerXml | Out-File -FilePath ".\all.xml"
        $all = @{}
        foreach ($allXml in $allResult.ChildNodes) {
            #TODO Add $cl.Add() for cluster hashtag
            if ($allXml.Name -in $all.Keys) {
                $all[$allXml.Name] = $all[$allXml.Name] + "," + $allXml.InnerText
            }
            else {
                $all.Add($allXml.Name, $allXml.InnerText)
            }
        }

        return $all
    }

    [hashtable] ListIPs() {
        $allResult = $this.QueryKempApi("access/listips", @{}).Response.Success.Data

        #$allResult.InnerXml | Out-File -FilePath ".\all.xml"
        $all = @{}
        foreach ($allXml in $allResult.ChildNodes) {
            #TODO Add $cl.Add() for cluster hashtag
            if ($allXml.Name -in $all.Keys) {
                $all[$allXml.Name] = $all[$allXml.Name] + "," + $allXml.InnerText
            }
            else {
                $all.Add($allXml.Name, $allXml.InnerText)
            }
        }

        return $all
    }

    [Hashtable] GetRealServers() {
        $rsResult = $this.QueryKempApi("access/listvs", @{}).Response.Success.Data
        $rs = @{}
        foreach ($rsXml in $rsResult.SelectNodes("//Rs")) {
            $rs.Add($rsXml.RsIndex, @{
                    "Status"   = $rsXml.Status
                    "VSIndex"  = $rsXml.VSIndex
                    "RsIndex"  = $rsXml.RsIndex
                    "Addr"     = $rsXml.Addr
                    "Port"     = $rsXml.Port
                    "DnsName"  = $rsXml.DnsName
                    "Forward"  = $rsXml.Forward
                    "Weight"   = $rsXml.Weight
                    "Limit"    = $rsXml.Limit
                    "Follow"   = $rsXml.Follow
                    "Enable"   = $rsXml.Enable
                    "Critical" = $rsXml.Critical
                }
            )
        }

        return $rs
    }
    
    [Hashtable] GetVirtualServices() {
        $vsResult = $this.QueryKempApi("access/listvs", @{}).Response.Success.Data
        $vs = @{}
        foreach ($vsXml in $vsResult.VS) {
            $vs.Add($vsXml.Index, @{
                    "VSAddress"            = $vsXml.VSAddress
                    "AddVia"               = $vsXml.AddVia
                    "CheckUse1.1"          = $vsXml.'CheckUse1.1'
                    "RsMinimum"            = $vsXml.RsMinimum
                    "SSLReverse"           = $vsXml.SSLReverse
                    "Layer"                = $vsXml.Layer
                    "MasterVS"             = $vsXml.MasterVS
                    "ServerInit"           = $vsXml.ServerInit
                    "Protocol"             = $vsXml.Protocol
                    "NeedHostName"         = $vsXml.NeedHostName
                    "CheckUseGet"          = $vsXml.CheckUseGet
                    "Compress"             = $vsXml.Compress
                    "AlertThreshold"       = $vsXml.AlertThreshold
                    "NPreProcessRules"     = $vsXml.NPreProcessRules
                    "Index"                = $vsXml.Index
                    "NumberOfRSs"          = $vsXml.NumberOfRSs
                    "ErrorCode"            = $vsXml.ErrorCode
                    "PS"                   = $vsXml.PS
                    "NickName"             = $vsXml.NickName
                    "SSLRewrite"           = $vsXml.SSLRewrite
                    "EspEnabled"           = $vsXml.EspEnabled
                    "Idletime"             = $vsXml.Idletime
                    "IsTransparent"        = $vsXml.IsTransparent
                    "Enable"               = $vsXml.Enable
                    "InputAuthMode"        = $vsXml.InputAuthMode
                    "TlsType"              = $vsXml.TlsType
                    "QoS"                  = $vsXml.QoS
                    "ForceL7"              = $vsXml.ForceL7
                    "MatchLen"             = $vsXml.MatchLen
                    "CheckPort"            = $vsXml.CheckPort
                    "Verify"               = $vsXml.Verify
                    "CheckType"            = $vsXml.CheckType
                    "ForceL4"              = $vsXml.ForceL4
                    "VStype"               = $vsXml.VStype
                    "MultiConnect"         = $vsXml.MultiConnect
                    "Transparent"          = $vsXml.Transparent
                    "InterceptOpts"        = $vsXml.InterceptOpts.Opt
                    "Schedule"             = $vsXml.Schedule
                    "Status"               = $vsXml.Status
                    "EnhancedHealthChecks" = $vsXml.EnhancedHealthChecks
                    "CheckUrl"             = $vsXml.CheckUrl
                    "NResponseRules"       = $vsXml.NResponseRules
                    "Transactionlimit"     = $vsXml.Transactionlimit
                    "SSLReencrypt"         = $vsXml.SSLReencrypt
                    "MasterVSID"           = $vsXml.MasterVSID
                    "SubnetOriginating"    = $vsXml.SubnetOriginating
                    "VSPort"               = $vsXml.VSPort
                    "PersistTimeout"       = $vsXml.PersistTimeout
                    "NRequestRules"        = $vsXml.NRequestRules
                    "FollowVSID"           = $vsXml.FollowVSID
                    "Persist"              = $vsXml.Persist
                    "OutputAuthMode"       = $vsXml.OutputAuthMode
                    "NRules"               = $vsXml.NRules
                    "StartTLSMode"         = $vsXml.StartTLSMode
                    "OCSPVerify"           = $vsXml.OCSPVerify
                    "UseforSnat"           = $vsXml.UseforSnat
                    "Intercept"            = $vsXml.Intercept
                    "Cache"                = $vsXml.Cache
                    "ClientCert"           = $vsXml.ClientCert
                }
            )
        }
        return ($vs)
    }

    # Constructor 
    Kemp ([string] $AdminAdress, [string] $Username, [securestring] $Password) {
        $this.AdminAdress = $AdminAdress.TrimEnd("/")

        $creds = [System.Net.NetworkCredential]::new($username, $Password)
        $this.Credential = $creds
    }

    # ToJson
    [string] ToJson () {
        return (ConvertTo-Json -InputObject $this)
    }

    hidden [Xml] QueryKempApi($Url, [Hashtable]$Parameters) {
        $Arr = @()

        foreach ($Key in $Parameters.Keys) {
            $Arr += "$Key=$($Parameters[$Key])"
        }

        $ParamStr = [string]::Join("&", $Arr)
        if ($ParamStr.Length -gt 0) {
            $Url = "$($Url)?$($ParamStr)"
        }

        [System.Net.ServicePointManager]::Expect100Continue = $true
        [System.Net.ServicePointManager]::MaxServicePointIdleTime = 10000
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} #DevSkim: ignore DS126185 until 2019-06-01 
        [System.Net.ServicePointManager]::SecurityProtocol = 'Tls11', 'Tls12'

        $Request = [System.Net.HttpWebRequest]::Create("$(($this.AdminAdress))/$Url")
        $Request.Credentials = ($this.Credential)

        $Response = $Request.GetResponse()
        $Stream = $response.GetResponseStream()

        $Encoding = [System.Text.Encoding]::GetEncoding("utf-8")
        $Reader = New-Object system.io.StreamReader($Stream, $Encoding)
        $Result = $Reader.ReadToEnd()

        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = $null

        return [Xml]$Result
    }

    hidden [Boolean] ValidateUrl($Url) {
        if (!$Url.StartsWith("https://")) {
            return $false
        }
    
        return $true
    }
}

$kempUser = "$RunAs[Name='CO.Kemp.KempRunasProfile']/UserName$"
$kempPass = "$RunAs[Name='CO.Kemp.KempRunasProfile']/Password$"

$urls = $LoadMasterBaseUrls.Split(",")

# Create SCOM API Object
$scomAPI = New-Object -comObject 'MOM.ScriptAPI'
$scomAPI.LogScriptEvent($scriptName, $eventId, 0, "`nDiscovery started by $(whoami) using $($kempUser) in `"$($host.Name)`".`nLoadMasterBaseUrls = $($LoadMasterBaseUrls)`nsourceId = $($sourceId)`ntargetId = $($targetId)")
$discoveryData = $scomApi.CreateDiscoveryData(0, $sourceId, $targetId)

$logString = "`n"

foreach ($url in $urls) {
    $username = $kempUser
    $password = ConvertTo-SecureString -String $kempPass -AsPlainText -Force

    $kemp = [Kemp]::new($url, $username, $password)

    $kemp.ValidateUrl($kemp.AdminAdress)

    $logString += "Connecting to $url"

    $vsHt = $kemp.GetVirtualServices() #VirtualService (incl. SubVS) information
    $rsHt = $kemp.GetRealServers() # RealServer information
    $allHt = $kemp.GetAll() # This is where you get LoadMaster node information
    
    # Cluster API is not accessible unless you're admin
    #$clHt = $kemp.GetClusters()
    #$fqdnHt = $kemp.ListFQDNs()
    #$ipHt = $kemp.ListIPs()


    # Saving to disk, only for manual analysis during development
    if ($isDebugging -or $Debug -eq 'true') {
        $vsHt | ConvertTo-Json | Out-File -FilePath "$tempDir\vs.json"
        $rsHt | ConvertTo-Json | Out-File -FilePath "$tempDir\rs.json"
        $allHt | ConvertTo-Json | Out-File -FilePath "$tempDir\all.json"
        
        # Cluster API is not accessible unless you're admin
        #$clHt | ConvertTo-Json | Out-File -FilePath "$($env:TEMP)\cl.json"
        #$fqdnHt | ConvertTo-Json | Out-File -FilePath "$tempDir\fqdn.json"
    }

    if ($allHt.Count -gt 0) {
        # got data in allHT, which means here's a LoadMaster returned.
        # prepare $allHt
        if ($allHt.hamode -eq "0") {
            $allHt["ha1hostname"] = ""
            $allHt["ha2hostname"] = ""
        }

        # Instantiate LoadMaster instance
        $lmInstance = $discoveryData.CreateClassInstance("$MPElement[Name='CO.Kemp.LoadMaster']$")
        $lmInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $allHt.managementhost)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/managementurl$", $url)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/hostname$", $allHt.managementhost)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/version$", $allHt.version)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/ha1hostname$", $allHt.ha1hostname)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/ha2hostname$", $allHt.ha2hostname)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/wuiport$", $allHt.wuiport)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/sshport$", $allHt.sshport)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/snmplocation$", $allHt.snmplocation)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/serialnumber$", $allHt.serialnumber.Trim())
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/ntphost$", $allHt.ntphost)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/dfltgw$", $allHt.dfltgw)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/timezone$", $allHt.timezone)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/SyslogPort$", $allHt.SyslogPort)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/radiusserver$", $allHt.radiusserver)
        $lmInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/nameserver$", $allHt.nameserver)
        $discoveryData.AddInstance($lmInstance)

        $logString += "`n`tLM: $($allHt.managementhost)"

        # Instantiate KempDA->LoadMaster relationship
        $lmDAInstance = $discoveryData.CreateClassInstance("$MPElement[Name='CO.Kemp.LoadMasterDA']$") #DA is singleton, don't need to add key properties
        $lmDALMContainmentRelationship = $discoveryData.CreateRelationshipInstance("$MPElement[Name='CO.Kemp.LoadMasterDAContainsLoadMaster']$")
        $lmDALMContainmentRelationship.source = $lmDAInstance
        $lmDALMContainmentRelationship.target = $lmInstance
        $discoveryData.AddInstance($lmDALMContainmentRelationship)

		
        # Select and Parse Virtual Services
        foreach ($vsKey in $vsHt.Keys) {
            if ($vsHt[$vsKey].MasterVSID -eq "0") {
                # regular VS
                $vs = $vsHt[$vsKey]
                $identifier = "$($allHt.managementhost)-vs$($vsKey)" #using this as a composite key property
                # Instantiate VirtualService
                $vsInstance = $discoveryData.CreateClassInstance("$MPElement[Name='CO.Kemp.VirtualService']$")
				$vsInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/hostname$", $allHt.managementhost) #for LM->VS Relationship
				$vsInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/managementurl$", $url) #for LM->VS Relationship
                $vsInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $vs.NickName)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/VSIndex$", $identifier)
				$vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/VSAddress$", $vs.VSAddress)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/MasterVSID$", $vs.MasterVSID)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/Port$", $vs.VSPort)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/NickName$", $vs.NickName)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/Protocol$", $vs.Protocol)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/QoS$", $vs.QoS)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/Layer$", $vs.Layer)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/VStype$", $vs.VStype)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/NumberOfRSs$", $vs.NumberOfRSs)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/CheckType$", $vs.CheckType)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/CheckUrl$", $vs.CheckUrl)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/ForceL7$", $vs.ForceL7)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/ForceL4$", $vs.ForceL4)
                $vsInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/AlertThreshold$", $vs.AlertThreshold)
                $discoveryData.AddInstance($vsInstance)

                $logString += "`n`t`tVS: $($vsKey)-$($vs.NickName)"

                <#
				# Instantiate LoadMaster->VirtualService relationship
                $lmVSHostingRelationship = $discoveryData.CreateRelationshipInstance("$MPElement[Name='CO.Kemp.LoadMasterHostsVirtualService']$")
                $lmVSHostingRelationship.source = $lmInstance
                $lmVSHostingRelationship.target = $vsInstance
                $discoveryData.AddInstance($lmVSHostingRelationship)
				#>
				
                foreach ($rsKey in $rsHt.Keys) {
                    if ($rsHt[$rsKey].VSIndex -eq $vs.Index ) {
                        # RS (in VS)
                        $rs = $rsHt[$rsKey]
                        $identifier = "$($allHt.managementhost)-vs$($vsKey)-rs$($rsKey)" #using this as a composite key property

                        # Instantiate RS
                        $rsInstance = $discoveryData.CreateClassInstance("$MPElement[Name='CO.Kemp.RealServer']$")
                        $rsInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "$($rs.Addr):$($rs.Port) ($($vs.NickName))")
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/RsIndex$", $identifier)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Forward$", $rs.Forward)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Addr$", $rs.Addr)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Weight$", $rs.Weight)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Critical$", $rs.Critical)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Follow$", $rs.Follow)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Port$", $rs.Port)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Limit$", $rs.Limit)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/VSIndex$", $rs.VSIndex)
                        $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/DnsName$", $rs.DnsName)
                        $discoveryData.AddInstance($rsInstance)

                        $logString += "`n`t`t`tRS: $($rsKey)-$($rs.Addr)"

                        # Instantiate VirtualService->SubVirtualService relationsship
                        $vsRSContainmentRelationship = $discoveryData.CreateRelationshipInstance("$MPElement[Name='CO.Kemp.VirtualServiceContainsRealServer']$")
                        $vsRSContainmentRelationship.source = $vsInstance
                        $vsRSContainmentRelationship.target = $rsInstance
                        $discoveryData.AddInstance($vsRSContainmentRelationship)
                    }
                }

                # Select and Parse SubVS
                foreach ($subVSKey in $vsHt.Keys) {
                    if ($vsHt[$subVSKey].MasterVSID -eq $vs.Index) {
                        # SubVS
                        $subVS = $vsHt[$subVSKey]
						$hostIdentifier = "$($allHt.managementhost)-vs$($vsKey)"
                        $identifier = "$($allHt.managementhost)-vs$($vsKey)-subvs$($subVSKey)" #using this as a composite key property

                        # Instantiate SubVS
                        $subVSInstance = $discoveryData.CreateClassInstance("$MPElement[Name='CO.Kemp.SubVirtualService']$")
                        $subVSInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $subVS.NickName)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/VSIndex$", $identifier)
						$subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.VirtualService']/VSIndex$", $hostIdentifier) # for VS->SubVS hosting relationship
						$subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/hostname$", $allHt.managementhost) #for LM->VS Relationship
						$subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.LoadMaster']/managementurl$", $url) #for LM->VS Relationship
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/MasterVSID$", $subVS.MasterVSID)
						$subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/VSAddress$", $subVS.VSAddress)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/Port$", $subVS.VSPort)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/NickName$", $subVS.NickName)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/Protocol$", $subVS.Protocol)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/QoS$", $subVS.QoS)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/Layer$", $subVS.Layer)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/VStype$", $subVS.VStype)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/NumberOfRSs$", $subVS.NumberOfRSs)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/CheckType$", $subVS.CheckType)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/CheckUrl$", $subVS.CheckUrl)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/ForceL7$", $subVS.ForceL7)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/ForceL4$", $subVS.ForceL4)
                        $subVSInstance.AddProperty("$MPElement[Name='CO.Kemp.SubVirtualService']/AlertThreshold$", $subVS.AlertThreshold)
                        $discoveryData.AddInstance($subVSInstance)

                        $logString += "`n`t`t`tSubVS: $($subVSKey)-$($subVS.NickName)"

						<#
                        # Instantiate VirtualService->SubVirtualService relationsship
                        $vsSubVSHostingRelationship = $discoveryData.CreateRelationshipInstance("$MPElement[Name='CO.Kemp.VirtualServiceHostsSubVirtualService']$")
                        $vsSubVSHostingRelationship.source = $vsInstance
                        $vsSubVSHostingRelationship.target = $subVSInstance
                        $discoveryData.AddInstance($vsSubVSHostingRelationship)
						#>

                        foreach ($rsKey in $rsHt.Keys) {
                            if ($rsHt[$rsKey].VSIndex -eq $subVS.Index ) {
                                # RS (in SubVS)
                                $rs = $rsHt[$rsKey]
                                $identifier = "$($allHt.managementhost)-vs$($vsKey)-subvs$($subVSKey)-rs$($rsKey)" #using this as a composite key property

                                # Instantiate RS
                                $rsInstance = $discoveryData.CreateClassInstance("$MPElement[Name='CO.Kemp.RealServer']$")
                                $rsInstance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", "$($rs.Addr):$($rs.Port) ($($subVS.NickName))")
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/RsIndex$", $identifier)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Forward$", $rs.Forward)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Addr$", $rs.Addr)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Weight$", $rs.Weight)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Critical$", $rs.Critical)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Follow$", $rs.Follow)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Port$", $rs.Port)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/Limit$", $rs.Limit)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/VSIndex$", $rs.VSIndex)
                                $rsInstance.AddProperty("$MPElement[Name='CO.Kemp.RealServer']/DnsName$", $rs.DnsName)
                                $discoveryData.AddInstance($rsInstance)

                                $logString += "`n`t`t`t`tRS: $($rsKey)-$($rs.Addr)"

                                # Instantiate VirtualService->SubVirtualService relationsship
                                $subVSRSContainmentRelationship = $discoveryData.CreateRelationshipInstance("$MPElement[Name='CO.Kemp.SubVirtualServiceContainsRealServer']$")
                                $subVSRSContainmentRelationship.source = $subVSInstance
                                $subVSRSContainmentRelationship.target = $rsInstance
                                $discoveryData.AddInstance($subVSRSContainmentRelationship)
                            }
                        }
                    }
                }
            }
        }
    }
}

# Return discovery data to workflow...
if ($isDebugging) {
    # or console/file, if we're debugging
    $scomAPI.AddItem($discoveryData)
    $scomAPI.ReturnItems()
}
else {
    $discoveryData
}

if ($error.Count -gt 0) {
    $scomAPI.LogScriptEvent($scriptName, $eventId, 2, $($error | ConvertTo-Json))
}
else {
    $scomAPI.LogScriptEvent($scriptName, $eventId, 0, "`nDiscovery ran without errors." + $logString)
}

######################################
# put last in any script
foreach ($newVar in (Get-Variable -Exclude $existingVars -Scope Global).Name){
    if ($newVar -ne "existingVars") {
        $obj = Get-Variable -Name $newVar -ValueOnly
        if ("Close" -in (Get-Member -InputObject $obj).Name) {$obj.Close}
        if ("Dispose" -in (Get-Member -InputObject $obj).Name) {$obj.Dispose}
        $obj = $null
        Remove-Variable -Name "obj" -Force -Scope Global
        Remove-Variable -Name $newVar -Force -Scope Global
    }
}
Get-SCOMManagementGroupConnection | Remove-SCOMManagementGroupConnection
foreach ($newModule in ((Get-Module).Name | Where-Object{$_ -notin $existingModules})){
    Remove-Module -Name $newModule
}]]></ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>LoadMasterBaseUrls</Name>
                    <Value>$Config/LoadMasterBaseUrls$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>Debug</Name>
                    <Value>$Config/Debug$</Value>
                  </Parameter>
                  <!--                  <Parameter>
                    <Name>kempUser</Name>
                    <Value>$RunAs[Name='CO.Kemp.KempRunasProfile']/UserName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>kempPass</Name>
                    <Value>$RunAs[Name='CO.Kemp.KempRunasProfile']/Password$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>sourceId</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>targetId</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>-->
                </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Script" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="CO.Kemp.StatusMonitoring.ScriptProbe" Accessibility="Internal">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="Parameters" type="NamedParametersType" minOccurs="0" maxOccurs="1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation>
          <Composite>
            <MemberModules>
              <ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Get-KempStatus.ps1</ScriptName>
                <ScriptBody><![CDATA[$existingModules = @((Get-Module).Name) # Save existing modules
$existingVars = @((Get-Variable -Scope Global).Name) # Save existing variables, put first in any script
######################################

$Error.Clear() # Fresh start!
$scriptName = "Get-KempStatus.ps1"
$eventId = 18003
$isDebugging = $false

[string] $kempUser = "$RunAs[Name='CO.Kemp.KempRunasProfile']/UserName$" # Not sure if you can do this, lets try
[string] $kempPass = "$RunAs[Name='CO.Kemp.KempRunasProfile']/Password$" # Not sure if you can do this, lets try


# Create SCOM API Object
$scomAPI = New-Object -comObject 'MOM.ScriptAPI'

$knownDebugHosts = @(
    "Visual Studio Code Host"
    "Windows PowerShell ISE Host"
)
if ($host.Name -in $knownDebugHosts) {
    # script is running in a known debug environment, set debug values
    $tempDir = "$env:TEMP\CO.Kemp"
    
	# needed a slightly more secure way to debug these scripts
	# using serialized credentials (encrypted) from file
	# if file is missing, script will ask for credentials, and save them for later use
	$credPath = $tempDir + "\kempcreds.xml"
    if (Test-Path -Path $credPath) {
        $credentials = Import-Clixml -Path $credPath
    } else {
        $credentials = Get-Credential -Message "Enter Kemp Login"
        Export-Clixml -Path $credPath -InputObject $credentials
    }
    
    [string] $kempUser = $credentials.UserName
    [string] $kempPass = $credentials.GetNetworkCredential().Password
    $LoadMasterBaseUrls = @("https://avmk01.westeurope.cloudapp.azure.com:8443/") #my free tier azure appliance, perfect for development, may be offline
    if (!(Test-Path -Path $tempDir)) {New-Item -Path $tempDir -ItemType Directory}
    $isDebugging = $true
}
else {
    # Get all LoadMaster instances and their base urls
    $lmClass = Get-SCOMClass -Name "CO.Kemp.LoadMaster"
    $lmInstances = Get-SCOMClassInstance -Class $lmClass
    [string[]] $LoadMasterBaseUrls = $lmInstances.'[CO.Kemp.LoadMaster].managementurl'
}

$scomAPI.LogScriptEvent($scriptName, $eventId, 0, "`nScript probe started by $(whoami) in `"$($host.Name)`".`nLoadMasterBaseUrls = $($LoadMasterBaseUrls -join ",")`nDebug=$($isDebugging)")

$logString = "`n"

#region KempClass
class Kemp {
    # Kemp Base URL (LoadMaster admin adress?)
    [string] $AdminAdress
    [System.Net.NetworkCredential] $Credential
    [System.Xml.XmlElement] $StatsXml

    [hashtable] GetClusters() {
        $clResult = $this.QueryKempApi("access/listclusters", @{}).Response.Success.Data

        #$clResult.InnerXml | Out-File -FilePath ".\cl.xml"
        $cl = @{}
        foreach ($clXml in $clResult) {

        }

        return $cl
    }

    [hashtable] GetAll() {
        $allResult = $this.QueryKempApi("access/getall", @{}).Response.Success.Data

        #$allResult.InnerXml | Out-File -FilePath ".\all.xml"
        $all = @{}
        foreach ($allXml in $allResult.ChildNodes) {
            #TODO Add $cl.Add() for cluster hashtag
            if ($allXml.Name -in $all.Keys) {
                $all[$allXml.Name] = $all[$allXml.Name] + "," + $allXml.InnerText
            }
            else {
                $all.Add($allXml.Name, $allXml.InnerText) | Out-Null
            }
        }
        if ($all.Count -gt 1) {
            #got results, add proper management property
            $all.Add("managementhost", $(([System.Uri]$this.AdminAdress).Host)) | Out-Null
        }
        return $all
    }

    [System.Xml.XmlElement] LoadStatsXML() {
        # using this member to avoid multiple API-checks when data is already loaded
        if ($null -eq $this.StatsXml) {
            #TODO: Need better StatsXML check
            $statsResult = $this.QueryKempApi("access/stats", @{}).Response.Success.Data
            #$statsResult.InnerXml | Out-File -FilePath ".\stats.xml" -Force
            $this.StatsXml = $statsResult
        }
        return $this.StatsXml
    }

    [hashtable] GetVSStats() {
        $xml = $this.LoadStatsXML()
        
        $vsStats = @{}
        foreach ($vsStatsXml in $xml.SelectNodes("//Vs")) {
            $properties = @{}
            foreach ($propertyXml in $vsStatsXML.ChildNodes) {
                $properties[$propertyXML.Name] = $propertyXml.InnerText
            }
            $vsStats[$vsStatsXml.Index] = $properties
        }
        if ($vsStats.Count -gt 1) {
            #got results, add proper management property
            $vsStats.Add("managementhost", $(([System.Uri]$this.AdminAdress).Host)) | Out-Null
        }
        return $vsStats
    }

    [hashtable] GetRSStats() {
        $xml = $this.LoadStatsXML()
        
        $rsStats = @{}
        foreach ($rsStatsXml in $xml.SelectNodes("//Rs")) {
            $properties = @{}
            foreach ($propertyXml in $rsStatsXML.ChildNodes) {
                $properties[$propertyXML.Name] = $propertyXml.InnerText
            }
            $rsStats[$rsStatsXml.RsIndex] = $properties
        }
        if ($rsStats.Count -gt 1) {
            #got results, add proper management property
            $rsStats.Add("managementhost", $(([System.Uri]$this.AdminAdress).Host)) | Out-Null
        }
        return $rsStats
    }

    [hashtable] GetLMStats() {
        $xml = $this.LoadStatsXML()
        
        $lmStats = @{}
        $lmStats["managementhost"] = $(([System.Uri]$this.AdminAdress).Host)
        $lmStats["CPU_SystemTotal"] = $xml.CPU.total.System
        $lmStats["MEM_used"] = $xml.Memory.memused
        $lmStats["MEM_usedPct"] = $xml.Memory.percentmemused
        $lmStats["MEM_free"] = $xml.Memory.memfree
        $lmStats["MEM_freePct"] = $xml.Memory.percentmemfree
        $lmStats["VSTotals_ConnsPerSec"] = $xml.VStotals.ConnsPerSec
        $lmStats["VSTotals_BitsPerSec"] = $xml.VStotals.BitsPerSec
        $lmStats["VSTotals_BytesPerSec"] = $xml.VStotals.BytesPerSec
        $lmStats["VSTotals_PktsPerSec"] = $xml.VStotals.PktsPerSec
        return $lmStats
    }

    [hashtable] ListFQDNs() {
        $allResult = $this.QueryKempApi("access/listfqdns", @{}).Response.Success.Data

        #$allResult.InnerXml | Out-File -FilePath ".\all.xml"
        $all = @{}
        foreach ($allXml in $allResult.ChildNodes) {
            #TODO Add $cl.Add() for cluster hashtag
            if ($allXml.Name -in $all.Keys) {
                $all[$allXml.Name] = $all[$allXml.Name] + "," + $allXml.InnerText
            }
            else {
                $all.Add($allXml.Name, $allXml.InnerText) | Out-Null
            }
        }

        return $all
    }

    [hashtable] ListIPs() {
        $allResult = $this.QueryKempApi("access/listips", @{}).Response.Success.Data

        #$allResult.InnerXml | Out-File -FilePath ".\all.xml"
        $all = @{}
        foreach ($allXml in $allResult.ChildNodes) {
            #TODO Add $cl.Add() for cluster hashtag
            if ($allXml.Name -in $all.Keys) {
                $all[$allXml.Name] = $all[$allXml.Name] + "," + $allXml.InnerText
            }
            else {
                $all.Add($allXml.Name, $allXml.InnerText) | Out-Null
            }
        }

        return $all
    }

    [Hashtable] GetRealServers() {
        $rsResult = $this.QueryKempApi("access/listvs", @{}).Response.Success.Data
        $rs = @{}
        foreach ($rsXml in $rsResult.SelectNodes("//Rs")) {
            $rs.Add($rsXml.RsIndex, @{
                    "Status"   = $rsXml.Status
                    "VSIndex"  = $rsXml.VSIndex
                    "RsIndex"  = $rsXml.RsIndex
                    "Addr"     = $rsXml.Addr
                    "Port"     = $rsXml.Port
                    "DnsName"  = $rsXml.DnsName
                    "Forward"  = $rsXml.Forward
                    "Weight"   = $rsXml.Weight
                    "Limit"    = $rsXml.Limit
                    "Follow"   = $rsXml.Follow
                    "Enable"   = $rsXml.Enable
                    "Critical" = $rsXml.Critical
                }
            ) | Out-Null
        }

        return $rs
    }
    
    [Hashtable] GetVirtualServices() {
        $vsResult = $this.QueryKempApi("access/listvs", @{}).Response.Success.Data
        $vs = @{}
        foreach ($vsXml in $vsResult.VS) {
            $vs.Add($vsXml.Index, @{
                    "VSAddress"            = $vsXml.VSAddress
                    "AddVia"               = $vsXml.AddVia
                    "CheckUse1.1"          = $vsXml.'CheckUse1.1'
                    "RsMinimum"            = $vsXml.RsMinimum
                    "SSLReverse"           = $vsXml.SSLReverse
                    "Layer"                = $vsXml.Layer
                    "MasterVS"             = $vsXml.MasterVS
                    "ServerInit"           = $vsXml.ServerInit
                    "Protocol"             = $vsXml.Protocol
                    "NeedHostName"         = $vsXml.NeedHostName
                    "CheckUseGet"          = $vsXml.CheckUseGet
                    "Compress"             = $vsXml.Compress
                    "AlertThreshold"       = $vsXml.AlertThreshold
                    "NPreProcessRules"     = $vsXml.NPreProcessRules
                    "Index"                = $vsXml.Index
                    "NumberOfRSs"          = $vsXml.NumberOfRSs
                    "ErrorCode"            = $vsXml.ErrorCode
                    "PS"                   = $vsXml.PS
                    "NickName"             = $vsXml.NickName
                    "SSLRewrite"           = $vsXml.SSLRewrite
                    "EspEnabled"           = $vsXml.EspEnabled
                    "Idletime"             = $vsXml.Idletime
                    "IsTransparent"        = $vsXml.IsTransparent
                    "Enable"               = $vsXml.Enable
                    "InputAuthMode"        = $vsXml.InputAuthMode
                    "TlsType"              = $vsXml.TlsType
                    "QoS"                  = $vsXml.QoS
                    "ForceL7"              = $vsXml.ForceL7
                    "MatchLen"             = $vsXml.MatchLen
                    "CheckPort"            = $vsXml.CheckPort
                    "Verify"               = $vsXml.Verify
                    "CheckType"            = $vsXml.CheckType
                    "ForceL4"              = $vsXml.ForceL4
                    "VStype"               = $vsXml.VStype
                    "MultiConnect"         = $vsXml.MultiConnect
                    "Transparent"          = $vsXml.Transparent
                    "InterceptOpts"        = $vsXml.InterceptOpts.Opt
                    "Schedule"             = $vsXml.Schedule
                    "Status"               = $vsXml.Status
                    "EnhancedHealthChecks" = $vsXml.EnhancedHealthChecks
                    "CheckUrl"             = $vsXml.CheckUrl
                    "NResponseRules"       = $vsXml.NResponseRules
                    "Transactionlimit"     = $vsXml.Transactionlimit
                    "SSLReencrypt"         = $vsXml.SSLReencrypt
                    "MasterVSID"           = $vsXml.MasterVSID
                    "SubnetOriginating"    = $vsXml.SubnetOriginating
                    "VSPort"               = $vsXml.VSPort
                    "PersistTimeout"       = $vsXml.PersistTimeout
                    "NRequestRules"        = $vsXml.NRequestRules
                    "FollowVSID"           = $vsXml.FollowVSID
                    "Persist"              = $vsXml.Persist
                    "OutputAuthMode"       = $vsXml.OutputAuthMode
                    "NRules"               = $vsXml.NRules
                    "StartTLSMode"         = $vsXml.StartTLSMode
                    "OCSPVerify"           = $vsXml.OCSPVerify
                    "UseforSnat"           = $vsXml.UseforSnat
                    "Intercept"            = $vsXml.Intercept
                    "Cache"                = $vsXml.Cache
                    "ClientCert"           = $vsXml.ClientCert
                }
            ) | Out-Null
        }
        return ($vs)
    }

    # Constructor 
    Kemp ([string] $AdminAdress, [string] $Username, [securestring] $Password) {
        $this.AdminAdress = $AdminAdress.TrimEnd("/")

        $creds = [System.Net.NetworkCredential]::new($username, $Password)
        $this.Credential = $creds
    }

    # ToJson
    [string] ToJson () {
        return (ConvertTo-Json -InputObject $this)
    }

    hidden [Xml] QueryKempApi($Url, [Hashtable]$Parameters) {
        $Arr = @()

        foreach ($Key in $Parameters.Keys) {
            $Arr += "$Key=$($Parameters[$Key])"
        }

        $ParamStr = [string]::Join("&", $Arr)
        if ($ParamStr.Length -gt 0) {
            $Url = "$($Url)?$($ParamStr)"
        }

        [System.Net.ServicePointManager]::Expect100Continue = $true
        [System.Net.ServicePointManager]::MaxServicePointIdleTime = 10000
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} #DevSkim: ignore DS126185 
        [System.Net.ServicePointManager]::SecurityProtocol = 'Tls11', 'Tls12'

        $Request = [System.Net.HttpWebRequest]::Create("$(($this.AdminAdress))/$Url")
        $Request.Credentials = ($this.Credential)

        $Response = $Request.GetResponse()
        $Stream = $response.GetResponseStream()

        $Encoding = [System.Text.Encoding]::GetEncoding("utf-8")
        $Reader = New-Object system.io.StreamReader($Stream, $Encoding)
        $Result = $Reader.ReadToEnd()

        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = $null

        return [Xml]$Result
    }

    hidden [Boolean] ValidateUrl($Url) {
        if (!$Url.StartsWith("https://")) {
            return $false
        }
    
        return $true
    }
}
#endregion KempClass

function Send-PropertyBag {
    param (
        [System.Collections.ArrayList] $Properties
		,[bool] $Debug
    )

    $omApi = New-Object -ComObject "MOM.ScriptApi"
    foreach($propertyHT in $Properties) {
        $pb = $omApi.CreatePropertyBag()
        foreach ($key in $propertyHT.Keys) {
            $pb.AddValue($key, $propertyHT[$key])
        }

        if ($Debug) {
            $omApi.AddItem($pb)
        }
        else {
            $pb
        }
    }
    if ($Debug) {
        $omApi.ReturnItems()
		$scomAPI.LogScriptEvent($scriptName, $eventId, 0, "`nTHIS EVENT IS ONLY IN DEBUG!!!")
    }
}

$pbHTArray = New-Object -TypeName System.Collections.ArrayList

foreach ($url in $LoadMasterBaseUrls) {
    $error.Clear()
    $username = $kempUser
    $password = ConvertTo-SecureString -String $kempPass -AsPlainText -Force

    $kemp = [Kemp]::new($url, $username, $password)

    $kemp.ValidateUrl($kemp.AdminAdress)

    $logString += "Connecting to $url"

    try {
        $vsHt = $kemp.GetVirtualServices() #VirtualService (incl. SubVS) information
        $rsHt = $kemp.GetRealServers() # RealServer information
        $allHt = $kemp.GetAll() # This is where you get LoadMaster node information
        $vsStatsHt = $kemp.GetVSStats()
        $rsStatsHt = $kemp.GetRSStats()
        $lmStatsHt = $kemp.GetLMStats()
        # Cluster API is not accessible unless you're admin, we'll deal with that later
        #$clHt = $kemp.GetClusters() 
    }
    catch {
        Continue
    }


    # Saving to disk, only for manual analysis during development
    if ($isDebugging) {
        $vsHt | ConvertTo-Json | Out-File -FilePath "$tempDir\vs.json"
        $rsHt | ConvertTo-Json | Out-File -FilePath "$tempDir\rs.json"
        $allHt | ConvertTo-Json | Out-File -FilePath "$tempDir\all.json"
        $vsStatsHt | ConvertTo-Json | Out-File -FilePath "$tempDir\vsStatsHt.json"
        $rsStatsHt | ConvertTo-Json | Out-File -FilePath "$tempDir\rsStatsHt.json"
        $lmStatsHt | ConvertTo-Json | Out-File -FilePath "$tempDir\lmStatsHt.json"
        # Cluster API is not accessible unless you're admin, we'll deal with that later
        #$clHt | ConvertTo-Json | Out-File -FilePath "$($env:TEMP)\cl.json"
    }

    if ($allHt.Count -gt 0) {
        # got data in allHT, which means there's a LoadMaster returned.

        [string] $identifier = $allHt.managementhost

        if (($allHt.ha1hostname.Length -gt 0) -and ($allHt.hostname -eq $allHt.ha1hostname)) {
            # ha1 is active
            $ha1Active = 1
            $ha2Active = 0
        } elseif (($allHt.ha2hostname.Length -gt 0) -and ($allHt.hostname -eq $allHt.ha2hostname)) {
            # ha2 is active
            $ha1Active = 0
            $ha2Active = 1
        } else {
            # not a cluster
            $ha1Active = 0
            $ha2Active = 0
        }

        # Create LM Propertybag
        $pbHTArray.Add(@{
            "objecttype" = "lm"
            "hostname"   = $allHt.managementhost
            "responds"   = "yes"
            "identifier" = $identifier.Trim()
            "CPU_SystemTotal" = $lmStatsHt.CPU_SystemTotal -as [double]
            "VSTotals_PktsPerSec" = $lmStatsHt.VSTotals_PktsPerSec -as [double]
            "MEM_used" = $lmStatsHt.MEM_used -as [double]
            "VSTotals_BitsPerSec" = $lmStatsHt.VSTotals_BitsPerSec -as [double]
            "MEM_usedPct" = $lmStatsHt.MEM_usedPct -as [double]
            "VSTotals_ConnsPerSec" = $lmStatsHt.VSTotals_ConnsPerSec -as [double]
            "VSTotals_BytesPerSec" = $lmStatsHt.VSTotals_BytesPerSec -as [double]
            "MEM_freePct" = $lmStatsHt.MEM_freePct -as [double]
            "MEM_free" = $lmStatsHt.MEM_free -as [double]
            "HA1_IsActive" = $ha1Active
            "HA2_IsActive" = $ha2Active
            "HA_Mode" = $allHt.hamode
        }) | Out-Null


        $logString += "`n`tLM: $identifier"

        # Select and Parse Virtual Services
        foreach ($vsKey in $vsHt.Keys) {
            if ($vsHt[$vsKey].MasterVSID -eq "0") {
                # regular VS
                $vs = $vsHt[$vsKey]
                $vsStats = $vsStatsHt[$vsKey]

                $identifier = "$($allHt.managementhost)-vs$($vsKey)"
                # send VS propertybag
                $pbHTArray.Add(@{
                    "objecttype" = "vs"
                    "nickname"   = $vs.NickName
                    "index"      = $identifier
                    "enabled"    = $vs.Enable
                    "status"     = $vs.Status
                    "identifier" = $identifier.Trim()
                    "ActiveConns" = $vsStats.ActiveConns -as [double]
                    "ConnsPerSec" = $vsStats.ConnsPerSec -as [double]
                }) | Out-Null

                $logString += "`n`t`tVS: $identifier`tenabled=$($vs.Enable),Status=$($vs.Status)"

				foreach ($rsKey in $rsHt.Keys) {
					if ($rsHt[$rsKey].VSIndex -eq $vs.Index ) {
						# RS (in VS)
                        $rs = $rsHt[$rsKey]
                        $rsStats = $rsStatsHt[$rsKey]
                        $identifier = "$($allHt.managementhost)-vs$($vsKey)-rs$($rsKey)" #using this as a composite key property

                        # prepare RS propertybag info
						$pbHTArray.Add(@{
							"objecttype" = "rs"
							"index" = $identifier
							"status" = $rs.Status
							"enabled" = $rs.Enable
                            "identifier" = $identifier
                            "ActiveConns" = $rsStats.ActiveConns -as [double]
                            "ConnsPerSec" = $rsStats.ConnsPerSec -as [double]
						}) | Out-Null

                        $logString += "`n`t`t`tRS: $($rsKey)-$($rs.Addr)"
                    }
                }

                # Select and Parse SubVS
                foreach ($subVSKey in $vsHt.Keys) {
                    if ($vsHt[$subVSKey].MasterVSID -eq $vs.Index) {
                        # SubVS
                        $subVS = $vsHt[$subVSKey]
                        $subVsStats = $vsStatsHt[$subVSKey]

                        $identifier = "$($allHt.managementhost)-vs$($vsKey)-subvs$($subVSKey)"
                        # send VS propertybag
                        $pbHTArray.Add(@{
                            "objecttype" = "subVS"
                            "nickname"   = $subVS.NickName
                            "index"      = $identifier
                            "enabled"    = $subVS.Enable
                            "status"     = $subVS.Status
                            "identifier" = $identifier.Trim()
                            "ActiveConns" = $subVsStats.ActiveConns -as [double]
                            "ConnsPerSec" = $subVsStats.ConnsPerSec -as [double]
                        }) | Out-Null

                        $logString += "`n`t`t`tSubVS: $identifier`tenabled=$($subVS.Enable),status=$($subVS.Status)"


                        foreach ($rsKey in $rsHt.Keys) {
                            if ($rsHt[$rsKey].VSIndex -eq $subVS.Index ) {
                                # RS (in SubVS)
                                $rs = $rsHt[$rsKey]
                                $rsStats = $rsStatsHt[$rsKey]
                                $identifier = "$($allHt.managementhost)-vs$($vsKey)-subvs$($subVSKey)-rs$($rsKey)" #using this as a composite key property

								# prepare RS propertybag info
								$pbHTArray.Add(@{
									"objecttype" = "rs"
									"index" = $identifier
									"status" = $rs.Status
									"enabled" = $rs.Enable
                                    "identifier" = $identifier
                                    "ActiveConns" = $rsStats.ActiveConns -as [double]
                                    "ConnsPerSec" = $rsStats.ConnsPerSec -as [double]
								}) | Out-Null
                                $logString += "`n`t`t`t`tRS: $($rsKey)-$($rs.Addr)"
                            }
                        }

                    }
                }
            }
        }
    } else {
        # No response from LoadMaster
        # Create LM Propertybag for a "no response" error
        $identifier = $(([System.Uri]$url).Host)

        $pbHTArray.Add(@{
            "objecttype" = "lm"
            "responds"   = "no"
            "identifier" = $identifier.Trim()
        }) | Out-Null
    }
}

Send-PropertyBag -Properties $pbHTArray -Debug $isDebugging

if ($error.Count -gt 0) {
    $scomAPI.LogScriptEvent($scriptName, $eventId, 2, $($Error.Exception))
}
else {
    $scomAPI.LogScriptEvent($scriptName, $eventId, 0, "`nProbe ran without errors." + $logString)
}

######################################
# put last in any script
foreach ($newVar in (Get-Variable -Exclude $existingVars -Scope Global).Name){
    if ($newVar -ne "existingVars") {
        $obj = Get-Variable -Name $newVar -ValueOnly
        if ("Close" -in (Get-Member -InputObject $obj).Name) {$obj.Close}
        if ("Dispose" -in (Get-Member -InputObject $obj).Name) {$obj.Dispose}
        $obj = $null
        Remove-Variable -Name "obj" -Force -Scope Global
        Remove-Variable -Name $newVar -Force -Scope Global
    }
}
Get-SCOMManagementGroupConnection | Remove-SCOMManagementGroupConnection
foreach ($newModule in ((Get-Module).Name | Where-Object{$_ -notin $existingModules})){
    Remove-Module -Name $newModule
}]]></ScriptBody>
                <Parameters></Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Script" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="CO.Kemp.StatusMonitor.ThreeStateMonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="Healthy" />
          <MonitorTypeState ID="Warning" />
          <MonitorTypeState ID="Error" />
        </MonitorTypeStates>
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>System!System.ExpressionEvaluatorSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element name="Identifier" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Type" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ErrorExpression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="WarningExpression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="HealthyExpression" type="ExpressionType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="ScriptDS" TypeID="CO.Kemp.StatusMonitoring.TimedDataSource">
              <Identifier>$Config/Identifier$</Identifier>
              <Type>$Config/Type$</Type>
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="ErrorFilter" TypeID="System!System.ExpressionFilter">
              <Expression>$Config/ErrorExpression$</Expression>
            </ConditionDetection>
            <ConditionDetection ID="WarningFilter" TypeID="System!System.ExpressionFilter">
              <Expression>$Config/WarningExpression$</Expression>
            </ConditionDetection>
            <ConditionDetection ID="HealthyFilter" TypeID="System!System.ExpressionFilter">
              <Expression>$Config/HealthyExpression$</Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Healthy">
              <Node ID="HealthyFilter">
                <Node ID="ScriptDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Warning">
              <Node ID="WarningFilter">
                <Node ID="ScriptDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Error">
              <Node ID="ErrorFilter">
                <Node ID="ScriptDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="CO.Kemp.InfraDiscovery.Discovery" Target="CO.Kemp.ResourcePool" Enabled="false" Remotable="true">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="CO.Kemp.LoadMaster" />
          <DiscoveryClass TypeID="CO.Kemp.VirtualService" />
          <DiscoveryClass TypeID="CO.Kemp.SubVirtualService" />
          <DiscoveryClass TypeID="CO.Kemp.RealServer" />
          <DiscoveryRelationship TypeID="CO.Kemp.VirtualServiceContainsRealServer" />
          <DiscoveryRelationship TypeID="CO.Kemp.LoadMasterHostsVirtualService" />
          <DiscoveryRelationship TypeID="CO.Kemp.VirtualServiceHostsSubVirtualService" />
          <DiscoveryRelationship TypeID="CO.Kemp.SubVirtualServiceContainsRealServer" />
          <DiscoveryRelationship TypeID="CO.Kemp.LoadMasterDAContainsLoadMaster" />
        </DiscoveryTypes>
        <DataSource ID="DiscoveryDS" TypeID="CO.Kemp.InfraDiscovery.ScriptDataSource">
          <LoadMasterBaseUrls>https://loadmaster.url</LoadMasterBaseUrls>
          <Debug>false</Debug>
          <IntervalSeconds>14400</IntervalSeconds>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="CO.Kemp.LoadMaster.Discovery.ManagedByPool" Target="CO.Kemp.ResourcePool" Enabled="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="SC!Microsoft.SystemCenter.ManagementActionPointShouldManageEntity" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$Target/Id$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="CO.Kemp.LoadMaster"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="SC!Microsoft.SystemCenter.ManagementActionPointShouldManageEntity"]$</RelationshipClass>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="CO.Kemp.VirtualService.Discovery.ManagedByPool" Target="CO.Kemp.ResourcePool" Enabled="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="SC!Microsoft.SystemCenter.ManagementActionPointShouldManageEntity" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$Target/Id$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="CO.Kemp.VirtualService"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="SC!Microsoft.SystemCenter.ManagementActionPointShouldManageEntity"]$</RelationshipClass>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="CO.Kemp.LoadMaster.VSTotals_PktsPerSec.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>VSTotals_PktsPerSec</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='VSTotals_PktsPerSec']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.VSConnsPerSecCollection" Target="CO.Kemp.VirtualService" Enabled="false" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.VirtualService']/VSIndex$</Identifier>
            <Type>vs</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.VirtualService']/NickName$</ObjectName>
            <CounterName>ConnsPerSec</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.VirtualService']/NickName$</InstanceName>
            <Value>$Data/Property[@Name='ConnsPerSec']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.VirtualService.ConnectionsPerSec.Collection" Target="CO.Kemp.VirtualService" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.VirtualService']/VSIndex$</Identifier>
            <Type>vs</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.VirtualService']/NickName$</ObjectName>
            <CounterName>ConnsPerSec</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.VirtualService']/NickName$</InstanceName>
            <Value>$Data/Property[@Name='ConnsPerSec']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.SubVirtualService.ActiveConnections.Collection" Target="CO.Kemp.SubVirtualService" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.SubVirtualService']/VSIndex$</Identifier>
            <Type>SubVS</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.SubVirtualService']/NickName$</ObjectName>
            <CounterName>ActiveConns</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.SubVirtualService']/NickName$</InstanceName>
            <Value>$Data/Property[@Name='ActiveConns']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.VirtualService.ActiveConnections.Collection" Target="CO.Kemp.VirtualService" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.VirtualService']/VSIndex$</Identifier>
            <Type>vs</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.VirtualService']/NickName$</ObjectName>
            <CounterName>ActiveConns</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.VirtualService']/NickName$</InstanceName>
            <Value>$Data/Property[@Name='ActiveConns']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.SubVirtualService.ConnectionPerSec.Collection" Target="CO.Kemp.SubVirtualService" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.SubVirtualService']/VSIndex$</Identifier>
            <Type>SubVS</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.SubVirtualService']/NickName$</ObjectName>
            <CounterName>ConnsPerSec</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.SubVirtualService']/NickName$</InstanceName>
            <Value>$Data/Property[@Name='ConnsPerSec']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.HA2IsActive.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>HA2_IsActive</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='HA2_IsActive']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.MEMUsed.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>MEM_used</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='MEM_used']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.MEMUsedPct.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>MEM_usedPct</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='MEM_usedPct']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.MEMFree.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>MEM_free</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='MEM_free']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.MEMFreePct.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>MEM_freePct</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='MEM_freePct']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.VSTotals_ConnsPerSec.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>VSTotals_ConnsPerSec</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='VSTotals_ConnsPerSec']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.VSTotals_BitsPerSec.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>VSTotals_BitsPerSec</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='VSTotals_BitsPerSec']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.VSTotals_BytesPerSec.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>VSTotals_BytesPerSec</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='VSTotals_BytesPerSec']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.CPUSystemTotal.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>CPU_SystemTotal</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='CPU_SystemTotal']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
      <Rule ID="CO.Kemp.LoadMaster.HA1IsActive.Collection" Target="CO.Kemp.LoadMaster" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="CO.Kemp.PerformanceDataMapper.DataSource">
            <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
            <Type>lm</Type>
            <IntervalSeconds>300</IntervalSeconds>
            <ObjectName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</ObjectName>
            <CounterName>HA1_IsActive</CounterName>
            <InstanceName>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</InstanceName>
            <Value>$Data/Property[@Name='HA1_IsActive']$</Value>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="CollectToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
    </Rules>
    <Monitors>
      <UnitMonitor ID="CO.Kemp.SubVSStatusMonitor" Accessibility="Public" Enabled="true" Target="CO.Kemp.SubVirtualService" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="CO.Kemp.StatusMonitor.ThreeStateMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="CO.Kemp.SubVSStatusMonitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="Healthy" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="Warning" HealthState="Warning" />
          <OperationalState ID="Error" MonitorTypeStateID="Error" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <Identifier>$Target/Property[Type='CO.Kemp.SubVirtualService']/VSIndex$</Identifier>
          <Type>SubVS</Type>
          <IntervalSeconds>600</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
          <ErrorExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='enabled']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Y</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Down</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </ErrorExpression>
          <WarningExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='enabled']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">N</Value>
              </ValueExpression>
            </SimpleExpression>
          </WarningExpression>
          <HealthyExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='status']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">Up</Value>
              </ValueExpression>
            </SimpleExpression>
          </HealthyExpression>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="CO.Kemp.RealServerStatusMonitor" Accessibility="Public" Enabled="true" Target="CO.Kemp.RealServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="CO.Kemp.StatusMonitor.ThreeStateMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="CO.Kemp.RealServerStatusMonitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="Healthy" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="Warning" HealthState="Warning" />
          <OperationalState ID="Error" MonitorTypeStateID="Error" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <Identifier>$Target/Property[Type='CO.Kemp.RealServer']/RsIndex$</Identifier>
          <Type>rs</Type>
          <IntervalSeconds>600</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
          <ErrorExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='enabled']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Y</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Down</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </ErrorExpression>
          <WarningExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='enabled']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">N</Value>
              </ValueExpression>
            </SimpleExpression>
          </WarningExpression>
          <HealthyExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='status']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">Up</Value>
              </ValueExpression>
            </SimpleExpression>
          </HealthyExpression>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="CO.Kemp.LoadMaster.APIAvailability.Monitor" Accessibility="Public" Enabled="true" Target="CO.Kemp.LoadMaster" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="CO.Kemp.StatusMonitor.ThreeStateMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="CO.Kemp.LoadMaster.APIAvailability.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>High</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="Healthy" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="Warning" HealthState="Warning" />
          <OperationalState ID="Error" MonitorTypeStateID="Error" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <Identifier>$Target/Property[Type='CO.Kemp.LoadMaster']/hostname$</Identifier>
          <Type>lm</Type>
          <IntervalSeconds>600</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
          <ErrorExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='responds']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">no</Value>
              </ValueExpression>
            </SimpleExpression>
          </ErrorExpression>
          <WarningExpression>
            <!--Unknown state, PB but "responds" is neither "yes" or "no"-->
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='responds']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">no</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='responds']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">yes</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </WarningExpression>
          <HealthyExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='responds']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">yes</Value>
              </ValueExpression>
            </SimpleExpression>
          </HealthyExpression>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="CO.Kemp.VirtualServiceStatusMonitor" Accessibility="Public" Enabled="true" Target="CO.Kemp.VirtualService" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="CO.Kemp.StatusMonitor.ThreeStateMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="CO.Kemp.VirtualServiceStatusMonitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Healthy" MonitorTypeStateID="Healthy" HealthState="Success" />
          <OperationalState ID="Warning" MonitorTypeStateID="Warning" HealthState="Warning" />
          <OperationalState ID="Error" MonitorTypeStateID="Error" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <Identifier>$Target/Property[Type='CO.Kemp.VirtualService']/VSIndex$</Identifier>
          <Type>vs</Type>
          <IntervalSeconds>600</IntervalSeconds>
          <SyncTime />
          <TimeoutSeconds>120</TimeoutSeconds>
          <ErrorExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='enabled']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Y</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='status']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Down</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </ErrorExpression>
          <WarningExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='enabled']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">N</Value>
              </ValueExpression>
            </SimpleExpression>
          </WarningExpression>
          <HealthyExpression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="String">Property[@Name='status']</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="String">Up</Value>
              </ValueExpression>
            </SimpleExpression>
          </HealthyExpression>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="CO.Kemp.SubVSStatusMonitor.AlertMessage" />
      <StringResource ID="CO.Kemp.RealServerStatusMonitor.AlertMessage" />
      <StringResource ID="CO.Kemp.LoadMaster.APIAvailability.Monitor.AlertMessage" />
      <StringResource ID="CO.Kemp.VirtualServiceStatusMonitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="CO.Kemp.LoadMaster">
          <Name>KEMP LoadMaster</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="hostname">
          <Name>Hostname</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="managementurl">
          <Name>Management URL</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="version">
          <Name>Version</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="ha1hostname">
          <Name>HA Primary Hostname</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="ha2hostname">
          <Name>HA Secondary Hostname</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="wuiport">
          <Name>Web UI Port</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="sshport">
          <Name>SSH Port</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="snmplocation">
          <Name>SNMP Location</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="serialnumber">
          <Name>Serialnumber</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="ntphost">
          <Name>NTP Host</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="dfltgw">
          <Name>Default Gateway</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="timezone">
          <Name>Time Zone</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="SyslogPort">
          <Name>SysLog Port</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="radiusserver">
          <Name>RADIUS Server</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster" SubElementID="nameserver">
          <Name>Nameserver</Name>
          <Description>Configured DNS Lookup server</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMasterDA">
          <Name>KEMP LoadMaster Overview</Name>
          <Description>This distributed application contains your LoadMaster Nodes, Virtual Services and Real Servers.</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer">
          <Name>KEMP RealServer</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="RsIndex">
          <Name>RsIndex</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="VSIndex">
          <Name>VSIndex</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="Addr">
          <Name>Address</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="Port">
          <Name>Port</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="Forward">
          <Name>Forward Method</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="Weight">
          <Name>Weight</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="Limit">
          <Name>Connection Limit</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="Critical">
          <Name>Critical</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="Follow">
          <Name>Port Following</Name>
          <Description>Port following is set when two services need to share persistence records. Typically this is done for HTTP and HTTPS services so users maintain a server session, regardless of whether they connect securely or not.</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServer" SubElementID="DnsName">
          <Name>DNS Name</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.ResourcePool">
          <Name>KEMP LoadMaster Monitoring Resource Pool</Name>
          <Description>Use this pool to define which management servers should partake in the Kemp LoadMaster discoveries and monitoring.</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService">
          <Name>KEMP SubVS</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="VSIndex">
          <Name>VS Index</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="NickName">
          <Name>VS Nickname</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="VSAddress">
          <Name>VS Address</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="MasterVSID">
          <Name>Master VSID</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="Port">
          <Name>Port</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="Protocol">
          <Name>Protocol</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="QoS">
          <Name>QoS</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="Layer">
          <Name>Layer</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="VStype">
          <Name>VS Type</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="NumberOfRSs">
          <Name>Number Of RealServers</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="CheckType">
          <Name>CheckType</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="CheckUrl">
          <Name>CheckUrl</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="ForceL7">
          <Name>ForceL7</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="ForceL4">
          <Name>Force L4</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService" SubElementID="AlertThreshold">
          <Name>Alert Threshold</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService">
          <Name>KEMP VirtualService</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="VSIndex">
          <Name>VS Index</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="NickName">
          <Name>VS Nickname</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="VSAddress">
          <Name>VS Address</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="MasterVSID">
          <Name>Master VSID</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="Port">
          <Name>Port</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="Protocol">
          <Name>Protocol</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="QoS">
          <Name>QoS</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="Layer">
          <Name>Layer</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="VStype">
          <Name>VS Type</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="NumberOfRSs">
          <Name>Number Of RealServers</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="CheckType">
          <Name>CheckType</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="CheckUrl">
          <Name>CheckUrl</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="ForceL7">
          <Name>ForceL7</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="ForceL4">
          <Name>Force L4</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService" SubElementID="AlertThreshold">
          <Name>Alert Threshold</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.InfraDiscovery.Discovery">
          <Name>KEMP Infrastructure Discovery</Name>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp">
          <Name>CO Kemp</Name>
          <Description>Provides basic discovery and monitoring of KEMP LoadMaster Nodes and Clusters using the REST-API instead of SNMP.

Changelog: https://github.com/ClasOhlson/CO.Kemp/blob/develop/CHANGELOG.md

          </Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVSStatusMonitor">
          <Name>CO Kemp SubVS Status Monitor</Name>
          <Description>Checks status of Kemp SubVS</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVSStatusMonitor.AlertMessage">
          <Name>Kemp SubVS Is Down</Name>
          <Description>The SubVS is reporting that Status is Down!</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVSStatusMonitor" SubElementID="Healthy">
          <Name>Up</Name>
          <Description>Up</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVSStatusMonitor" SubElementID="Warning">
          <Name>PossibleIssue</Name>
          <Description>PossibleIssue</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVSStatusMonitor" SubElementID="Error">
          <Name>Down</Name>
          <Description>Down</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServerStatusMonitor">
          <Name>CO Kemp VirtualService Status Monitor</Name>
          <Description>Checks status of Kemp VirtualService</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServerStatusMonitor.AlertMessage">
          <Name>Kemp RS Is Down</Name>
          <Description>KEMP RealServer is Down!

This might effect the availability of it's VirtualService, depending on the number of available RealServers attached.</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServerStatusMonitor" SubElementID="Healthy">
          <Name>Up</Name>
          <Description>Up</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServerStatusMonitor" SubElementID="Warning">
          <Name>PossibleIssue</Name>
          <Description>PossibleIssue</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.RealServerStatusMonitor" SubElementID="Error">
          <Name>Down</Name>
          <Description>Down</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.APIAvailability.Monitor">
          <Name>LoadMaster API Availability</Name>
          <Description>Monitors access to LoadMaster Management Interface API.</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.APIAvailability.Monitor.AlertMessage">
          <Name>Kemp LoadMaster API Unreachable</Name>
          <Description>The LoadMaster API is unreachable!

This could indicate that the KEMP LoadMaster is completely unavailable.
It could also mean that monitoring access has been removed, or network access from SCOM-servers have been blocked.</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.APIAvailability.Monitor" SubElementID="Healthy">
          <Name>Responds</Name>
          <Description>Responds</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.APIAvailability.Monitor" SubElementID="Warning">
          <Name>PossibleIssue</Name>
          <Description>PossibleIssue</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.APIAvailability.Monitor" SubElementID="Error">
          <Name>NoResponse</Name>
          <Description>NoResponse</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualServiceStatusMonitor">
          <Name>CO Kemp VirtualService Status Monitor</Name>
          <Description>Checks status of Kemp VirtualService</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualServiceStatusMonitor.AlertMessage">
          <Name>Kemp VS Is Down</Name>
          <Description>The VirtualService is reporting that Status is Down!</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualServiceStatusMonitor" SubElementID="Healthy">
          <Name>Up</Name>
          <Description>Up</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualServiceStatusMonitor" SubElementID="Warning">
          <Name>PossibleIssue</Name>
          <Description>PossibleIssue</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualServiceStatusMonitor" SubElementID="Error">
          <Name>Down</Name>
          <Description>Down</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMasterDAContainsLoadMaster">
          <Name>LoadMasterDA Contains LoadMaster Relationship</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMasterHostsVirtualService">
          <Name>LoadMaster Hosts VirtualService Relationship</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualServiceContainsRealServer">
          <Name>SubVS Contains RealServer Relationship</Name>
          <Description>Defines the relationship between a SubVS and a RealServer</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualServiceContainsRealServer">
          <Name>Virtual Service Contains RealServer Relationship</Name>
          <Description>Defines the relationship between a Virtual Service and a RealServer</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualServiceHostsSubVirtualService">
          <Name>VirtualService Hosts SubVirtualService Relationship</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.VSTotals_PktsPerSec.Collection">
          <Name>KEMP LM VSTOTALS Packets per Sec Collection Rule</Name>
          <Description>Collects VSTOTALS Packets per Second for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VSConnsPerSecCollection">
          <Name>(DEPRECATED) KEMP VS Connection per Second Collection Rule</Name>
          <Description>Collects Connection per Second for KEMP Virtual Service</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService.ConnectionsPerSec.Collection">
          <Name>KEMP VS Connections per Sec Collection Rule</Name>
          <Description>Collects Connections per Second for KEMP Virtual Service</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService.ActiveConnections.Collection">
          <Name>KEMP SubVS Active Connections Collection Rule</Name>
          <Description>Collects Active Connections for KEMP SubVS</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.VirtualService.ActiveConnections.Collection">
          <Name>KEMP VS Active Connections Collection Rule</Name>
          <Description>Collects Active Connections for KEMP Virtual Service</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.SubVirtualService.ConnectionPerSec.Collection">
          <Name>KEMP SubVS Connections per Second Collection Rule</Name>
          <Description>Collects Connections per Second for KEMP SubVS</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.HA2IsActive.Collection">
          <Name>KEMP LM HA2 IsActive Collection Rule</Name>
          <Description>Collects if HA2 is Active (1) or Inactive (0) KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.MEMUsed.Collection">
          <Name>KEMP LM MEM Used Total Collection Rule</Name>
          <Description>Collects MEM Used for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.MEMUsedPct.Collection">
          <Name>KEMP LM MEM Used % Collection Rule</Name>
          <Description>Collects MEM Used percent for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.MEMFree.Collection">
          <Name>KEMP LM MEM Free Collection Rule</Name>
          <Description>Collects MEM Free for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.MEMFreePct.Collection">
          <Name>KEMP LM MEM Free % Collection Rule</Name>
          <Description>Collects MEM Free Percent for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.VSTotals_ConnsPerSec.Collection">
          <Name>KEMP LM VSTotals Connections per Sec Collection Rule</Name>
          <Description>Collects VSTotals Connections per Second for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.VSTotals_BitsPerSec.Collection">
          <Name>KEMP LM VSTOTALS Bits per Sec Collection Rule</Name>
          <Description>Collects VSTOTALS Bits per Second for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.VSTotals_BytesPerSec.Collection">
          <Name>KEMP LM VSTOTALS Bytes per Sec Collection Rule</Name>
          <Description>Collects VSTOTALS Bytes per Second for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.CPUSystemTotal.Collection">
          <Name>KEMP LM CPU System Total Collection Rule</Name>
          <Description>Collects CPU System Total percent for KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.LoadMaster.HA1IsActive.Collection">
          <Name>KEMP LM HA1 IsActive Collection Rule</Name>
          <Description>Collects if HA1 is Active (1) or Inactive (0) KEMP LoadMaster</Description>
        </DisplayString>
        <DisplayString ElementID="CO.Kemp.KempRunasProfile">
          <Name>KEMP Runas Profile</Name>
          <Description>Used to manage credentials for monitoring KEMP clusters/devices. No real support for multiple credentials in this version, create a read-only user with the same username/password in each cluster for now...</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>